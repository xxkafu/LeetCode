/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        return helper(root,root);
    }
    
    bool helper(TreeNode* p1, TreeNode* p2) {
        if(p1==NULL || p2==NULL)
            return p1==p2? true:false;
        else {
            if(p1->val!=p2->val)
                return false;
            else
                return helper(p1->left, p2->right) && helper(p1->right, p2->left);
        }
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(root== NULL)
            return true;
        
        stack<TreeNode*> leftBottle;
        stack<TreeNode*> rightBottle;
        leftBottle.push(root->left);
        rightBottle.push(root->right);
        while((!leftBottle.empty()&&!rightBottle.empty()) ) {
            TreeNode* leftPtr = leftBottle.top();
            leftBottle.pop();
            TreeNode* rightPtr = rightBottle.top();
            rightBottle.pop();
            if(leftPtr!=NULL&&rightPtr!=NULL) {
                if(leftPtr->val!=rightPtr->val) 
                    return false;
                leftBottle.push(leftPtr->left);
                rightBottle.push(rightPtr->right);
                leftBottle.push(leftPtr->right);
                rightBottle.push(rightPtr->left);
            }
            else
                if(leftPtr==NULL && rightPtr==NULL)
                    continue;
                else
                    return false;
        }
        if(leftBottle.empty()&&rightBottle.empty())
            return true;
        else
            return false;
    }


};

