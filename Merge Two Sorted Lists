/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

//solotion:always let l1 present the list containning the smaller value
class Solution {
public:
    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
        if(l1==NULL)
            return l2;
        if(l2==NULL)
            return l1;
        if(l1->val>l2->val) {// make l1 present the smaller list
            swap(l1,l2);
        }
        ListNode *retList= l1;
        while(l1->next!=NULL) {
            if(l1->next->val<=l2->val) {
                l1= l1->next;
            }
            else {// change the l1,l2 ;thus l1 still present the smaller lst
                ListNode *tmp = l1->next;
                l1->next = l2;
                l2= tmp;
                l1= l1->next;
            }
        }
            l1->next = l2;
            return retList;
    }
};
