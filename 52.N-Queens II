class Solution {
public:
    int totalNQueens(int n) {
        vector<string> board(n,string(n,'.'));
        int res=0;
        helper(0,board,res);
        return res;
    }
    
    void helper(int row,vector<string>&board, int &res) {
        if(row == board.size())
            res++;
        else {
            for(int i= 0; i<board.size(); i++) {
                if(canPlace(row,i,board)) {
                    board[row][i] = 'Q';
                    helper(row+1,board,res);
                    board[row][i] = '.';
                }
            }
        }
    }
    
    bool canPlace(int row, int col, vector<string> &board) {
        // col direction
        for(int i=0; i<row; i++) {
            if(board[i][col]=='Q')
                return false;
        }
        // left up direction
        for(int i=row-1,j=col-1; i>=0 && j>=0; i--,j--) {
            if(board[i][j] == 'Q')
                return false;
        }
        // right up direction
        for(int i=row-1,j=col+1; i>=0 &&j<board.size(); i--,j++) {
            if(board[i][j] =='Q')
                return false;
        }
        
        return true;
    }
};
