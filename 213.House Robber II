//solution: 其实跟house robber一致，只不过环形以后,可能会导致首尾冲突
//所以采用分而治之的方法，先是第一个到倒数第二个，然后再试第二个到倒数第一个
class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.size()==0)
            return 0;
        if(nums.size()==1)
            return nums.back();
        return max(helper(0,nums),helper(1,nums));
    }
    int helper(int base, vector<int>& nums){
        int a=0;
        int b=0;
        for(int i=0;i<nums.size()-1;i++){
            int index = base+i;
            a = max(a+num[index],b);
            swap(a,b);
        }
        return max(a,b);
    }
};
