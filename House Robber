// use the dynamic programming , whether the i th house is robber or not 
// is determined by the dp[i-2]+num[i] , dp[i-1]
class Solution {
public:
    int rob(vector<int> &num) {
        int size = num.size();
        if(size == 0)
            return 0;
        if(size == 1)
            return num[0];
        if(size == 2)
            return max(num[0],num[1]);
        if(size>2) {
            vector<int> dp(size);
            dp[0] = num[0];
            dp[1]= max(num[0],num[1]);
            for(int i=2; i<size;i++) {
                dp[i] = max(dp[i-2]+num[i],dp[i-1]);
            }
            return dp[size-1];
        }
        
    }
};

