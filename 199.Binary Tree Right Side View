// solutution:
// easy
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode *root) {
        vector<int> res;
        helper(root,res,0);
        return res;
    }
    
    void helper(TreeNode *root, vector<int> &res, int index) {
        if(root !=NULL) {
            if(index == res.size()) {
                res.push_back(root->val);
                index++;
            }
            else {
                    res[index] = root->val;
                    index++;
            }
                
            helper(root->left,res,index);
            helper(root->right,res,index);
        }
    }
};


class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        queue<TreeNode*> bot;
        vector<int> res;
        if(root==NULL)
            return res;
        bot.push(root);
        while(!bot.empty()){
            int size=bot.size();
            TreeNode* ptr;
            for(int i=0;i<size;i++){
                ptr=bot.front();
                bot.pop();
                if(ptr->left)
                    bot.push(ptr->left);
                if(ptr->right)
                    bot.push(ptr->right);
            }
            res.push_back(ptr->val);
        }
        return res;
    }
};
