//solution1
class Solution {
public:
    int search(int A[], int n, int target) {
        return helper(A,0,n-1,target);
    }

    int helper(int A[],int begin,int end, int target) {
        if(begin>end)
            return -1;
        int middle = A[(begin+end)/2];
        if (middle == target)
           return (begin+end)/2;
        if(A[begin]<A[end]) {
            while(begin<=end&&target<=A[end]&&target>=A[begin]) {
                if(target == A[begin])
                    return begin;
                if(target == A[end] )
                    return end;
                middle = A[(begin+end)/2];
                if(middle==target)
                    return (begin+end)/2;
                else
                    if(middle<target)
                        begin=(begin+end)/2+1;
                    else
                        end=(begin+end)/2-1;
            }
            return -1;
        }
        else {
               int res1=helper(A,begin,(begin+end)/2-1,target);
               int res2=helper(A,(begin+end)/2+1,end,target);
               if(res1==-1)
                   return res2;
               else
                   return res1;
            }
    }
};

// solution2
class Solution {
public:
    int search(int A[], int n, int target) {
    
        int left = 0;
        int right = n-1;
        while(left<=right) {
        int middle = (left+right)/2;
        if(A[middle]==target)
            return middle;
        if(A[left]<=A[middle]) {
            if(A[left]<=target&&target<A[middle])
            right = middle-1;
            else
            left = middle+1;
        }
        else {
            if(A[middle]<target && target<=A[right])
            left = middle+1;
            else
            right = middle-1;
        }
        }
        return -1;
    }
};
