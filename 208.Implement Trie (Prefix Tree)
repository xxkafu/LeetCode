// easy
class TrieNode {
public:
    // Initialize your data structure here.
    TrieNode() {
        key=false;
        for(int i=0;i<26;i++)
            child[i]=NULL;
    }
    bool key;
    TrieNode* child[26];
};

class Trie {
public:
    Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    void insert(string s) {
        TrieNode* ptr= root;
        for(int i=0; i<s.size();i++){
            if(ptr->child[s[i]-'a']==NULL){
                ptr->child[s[i]-'a']=new TrieNode();
            }
            ptr=ptr->child[s[i]-'a'];
        }
        ptr->key=true;
    }

    // Returns if the word is in the trie.
    bool search(string key) {
        TrieNode* ptr=root;
        for(int i=0;i<key.size();i++){
            if(ptr->child[key[i]-'a']==NULL)
                return false;
            ptr=ptr->child[key[i]-'a'];
        }
        if(ptr->key)
            return true;
        else
            return false;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    bool startsWith(string prefix) {
        TrieNode* ptr=root;
        for(int i=0;i<prefix.size();i++){
            if(ptr->child[prefix[i]-'a']==NULL)
                return false;
            ptr=ptr->child[prefix[i]-'a'];
        }
        return true;
    }

private:
    TrieNode* root;
};

// Your Trie object will be instantiated and called as such:
// Trie trie;
// trie.insert("somestring");
// trie.search("key");

