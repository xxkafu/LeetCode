class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<int>post2pre(numCourses,0);
        vector<unordered_set<int>> pre2post(numCourses);
        for(int i=0; i<prerequisites.size();i++){
             pre2post[prerequisites[i].second].insert(prerequisites[i].first);
        }
        for(int i=0; i<numCourses;i++){
            for(auto itr=pre2post[i].begin();itr!=pre2post[i].end();itr++){
                post2pre[*itr]++;
            }
        }
        queue<int> candidate;
        for(int i=0;i<numCourses;i++){
            if(post2pre[i]==0)
                candidate.push(i);
        }
        int finishCourse=0;
        while(!(candidate).empty()){
                int num=candidate.front();
                candidate.pop();
                finishCourse++;
                for(auto itr1=pre2post[num].begin();itr1!=pre2post[num].end();itr1++){
                    int post=*itr1;
                    post2pre[post]--;
                    if(post2pre[post]==0){
                        candidate.push(post);
                    } // 更新post2pre表,以便下次取数进res
                }
                //pre2post.erase(num);
        }
        if(finishCourse<numCourses)
            return false;
        return true;
    }
};
