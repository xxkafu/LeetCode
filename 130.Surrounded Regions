class Solution {
public:
    void solve(vector<vector<char>>& board) {
        if(board.size()<3||board[0].size()<3)
            return;
        const int row= board.size();
        const int col=board[0].size();
        for(int j=0;j<col;j++){
            if(board[0][j]=='O'){
                board[0][j]='Z';
                helper(0,j,row,col,board);
            }

            if(board[row-1][j]=='O'){
                board[row-1][j]='Z';
                helper(row-1,j,row,col,board);
            }

        }
        for(int i=0; i<row;i++){
            if(board[i][0]=='O'){
                board[i][0]='Z';
                helper(i,0,row,col,board);
            }
            if(board[i][col-1]=='O'){
                board[i][col-1]='Z';
                helper(i,col-1,row,col,board);
            }

        }
        for(int i=0;i<row;i++){
            for(int j=0; j<col;j++){
                if(board[i][j]=='O')
                    board[i][j]='X';
                else
                    if(board[i][j]=='Z')
                        board[i][j]='O';
            }
        }
        return ;
    }
    void helper(int rowIndex, int colIndex, const int rowLimit, const int colLimit,vector<vector<char>> &board){
        int val = rowIndex*colLimit+colIndex;
        queue<int> bot;
        bot.push(val);
        while(!bot.empty()){
            val = bot.front();
            int i= val/colLimit;
            int j=val%colLimit;
            bot.pop();
            if(i-1>=0&&board[i-1][j]=='O'){
                board[i-1][j]='Z';
                bot.push((i-1)*colLimit+j);
            }
            if(i+1<rowLimit&&board[i+1][j]=='O'){
                board[i+1][j]='Z';
               bot.push((i+1)*colLimit+j);
            }
            if(j-1>=0&&board[i][j-1]=='O') {
                board[i][j-1]='Z';
                bot.push(i*colLimit+j-1);
            }
            if(j+1<colLimit&&board[i][j+1]=='O'){
                board[i][j+1]='Z';
                bot.push(i*colLimit+j+1);
            }

        }
    }
};

